from collections import deque


def bfs(graph, start):
    visited = set()  # множество для отслеживания посещенных узлов
    queue = deque([start])  # очередь, содержащая узлы для посещения
    visited = set()
    queue = deque([start])
    while queue:  # пока есть узлы в очереди
        node = queue.popleft()  # извлекаем узел из очереди

        if node not in visited:  # если узел еще не посещен
            print(node)  # обработка узла (например, печать)
            visited.add(node)  # помечаем узел как посещенный
            queue.extend(graph[node])  # добавляем смежные узлы


def test_bfs():
    # Тест 1: Стандартный граф
    graph1 = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    print("Тест 1 - Ожидаемый результат: A B C D E F")
    bfs(graph1, 'A')  # Ожидаемый вывод: A B C D E F

    # Тест 2: Граф с циклом
    graph2 = {
        'A': ['B'],
        'B': ['A', 'C'],
        'C': ['B', 'D'],
        'D': ['C', 'A']
    }
    print("Тест 2 - Ожидаемый результат: A B C D")
    bfs(graph2, 'A')  # Ожидаемый вывод: A B C D

    # Тест 3: Несвязный граф
    graph3 = {
        'A': ['B'],
        'B': ['A'],
        'C': ['D'],
        'D': ['C']
    }
    print("Тест 3 - Ожидаемый результат: A B")
    bfs(graph3, 'A')  # Ожидаемый вывод: A B

    # Тест 4: Пустой граф
    graph4 = {}
    print("Тест 4 - Ожидаемый результат: Граф пуст или начальный узел отсутствует.")
    bfs(graph4, 'A')  # Ожидаемый вывод: Граф пуст или начальный узел отсутствует.

    # Тест 5: Граф с одним узлом
    graph5 = {
        'A': []
    }
    print("Тест 5 - Ожидаемый результат: A")
    bfs(graph5, 'A')  # Ожидаемый вывод: A


# Запуск тестов
test_bfs()
